generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  first_name          String
  last_name           String
  email               String   @unique
  phone               String   @unique
  profile_picture_url String?
  is_instructor       Boolean  @default(false)
  is_verified         Boolean  @default(false)
  password            String
  createdAt           DateTime @default(now())
  Course              Course[]
}

// User -> Otp
model Otp {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  otp       String
  createdAt DateTime @default(now())
  // TODO -> Need to handle form MongoDB Shell or MongoDB Compass
  // expires
}

// Course -> Section -> Video
model Course {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  duration       Int       @default(0)
  authorId       String    @db.ObjectId
  author         User      @relation(fields: [authorId], references: [id])
  description    String
  total_sections Int       @default(0)
  total_videos   Int       @default(0)
  thumbnail_url  String?
  section        Section[]
  // Video          Video[]
}

model Section {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  title            String
  duration         Int                @default(0)
  courseId         String             @db.ObjectId
  course           Course             @relation(fields: [courseId], references: [id], onDelete: Cascade)
  total_videos     Int                @default(0)
  video            Video[]
  UnprocessedVideo UnprocessedVideo[]
}

model Video {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  video_key   String  @unique
  duration    Int
  // courseId    String  @db.ObjectId
  // course      Course  @relation(fields: [courseId], references: [id])
  sectionId   String  @db.ObjectId
  section     Section @relation(fields: [sectionId], references: [id], onDelete: Cascade)
}

// This will store the video metadata till the user uploads the video to S3 with the presigned URL and S3 Event Notification notifies the Backend about upload. Else it will be deleted after 1 hour itself
model UnprocessedVideo {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  video_key   String  @unique
  duration    Int
  sectionId   String  @db.ObjectId
  section     Section @relation(fields: [sectionId], references: [id], onDelete: Cascade)
}
